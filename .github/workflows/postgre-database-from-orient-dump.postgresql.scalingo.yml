name: Create a postgre database from an oriendb dump

on:
  workflow_call:
    inputs:
      application-name:
        required: true
        type: string
      addon-plan-postgresql:
        required: true
        type: string
      extensions:
        required: false
        type: string
        default: ''
    secrets:
      SCALINGO_API_TOKEN:
        required: true
      DUMP_FILENAME:
      ORIENTDB_DBLOGIN:
        required: true
      ORIENTDB_DBNAME:
        required: true
      ORIENTDB_DBPASSWORD:
        required: true
      SSH_ZORA_LOGIN:
        required: true
      SSH_ZORA_PASSWORD:
        required: true
      ZORA_USER:
        required: true
      SSH_PRIVATE_KEY:
        required: true


jobs:
#  create-application-on-scalingo:
#    uses: romain-cambonie/serenity-workflows/.github/workflows/_prepare-application-and-keys.scalingo.reusable.yml@master
#    with:
#      application-name: ${{ inputs.application-name }}
#    secrets:
#      SCALINGO_API_TOKEN: ${{ secrets.SCALINGO_API_TOKEN }}
#
#  reset-database-addon:
#    needs:
#      - create-application-on-scalingo
#
#    uses: romain-cambonie/serenity-workflow-dev/.github/workflows/_setup-addon.postgresql.scalingo.reusable.yml@master
#    with:
#      application-name: ${{ inputs.application-name }}
#      addon-plan-postgresql: ${{ inputs.addon-plan-postgresql }}
#      reset: true
#    secrets:
#      SCALINGO_API_TOKEN: ${{ secrets.SCALINGO_API_TOKEN }}
#
#  wait-addon-running:
#    needs:
#      - reset-database-addon
#
#    runs-on: ubuntu-latest
#    steps:
#      - name: Wait for addon
#        run: sleep 30s

#  install-postgresql-extensions:
#    needs:
#      - reset-database-addon
#      - wait-addon-running
#
#    if: inputs.extensions
#
#    uses: romain-cambonie/serenity-workflow-dev/.github/workflows/_create-extension.postgresql.scalingo.reusable.yml@master
#    with:
#      extensions-as-comma-separated-string: ${{ inputs.extensions }}
#      application-name: ${{ inputs.application-name }}
#    secrets:
#      SCALINGO_API_TOKEN: ${{ secrets.SCALINGO_API_TOKEN }}


  create-drivers-table:
    name: Create drivers from json
    runs-on: ubuntu-latest
#    container:
#      image: rcambonie/scalingo-cli

    env:
      DATABASE_VAR: "$DATABASE_URL"

    steps:
      - name: Set up ssh private key for remote machine
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          echo ${{ secrets.SSH_ZORA_PASSWORD }} | ssh-agent ssh-add ~/.ssh/id_rsa
          echo ${{ secrets.SSH_ZORA_PASSWORD }} | ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.SSH_ZORA_LOGIN }} 'cd /opt && sudo /opt/orientdb-community-2.2.30/bin/console.sh "connect plocal:orientdb-community-2.2.30/databases/${{ secrets.ORIENTDB_DBNAME }} ${{ secrets.ORIENTDB_DBLOGIN }} ${{ secrets.ORIENTDB_DBPASSWORD }};EXPORT DATABASE /home/${{ secrets.ZORA_USER }}/${{ secrets.DUMP_FILENAME }};exit" && cd /home/${{ secrets.ZORA_USER }} && ls -la && exit'

      - name: Copy file using SCP
        run: |
          scp -o StrictHostKeyChecking=no -i ${{ secrets.SSH_PRIVATE_KEY }} ${{ secrets.SSH_ZORA_LOGIN }}:/home/${{ secrets.ZORA_USER }}/${{ secrets.DUMP_FILENAME }}  .
          ls -la

#      - name: Login with api-token
#        run: scalingo login --api-token=${{ secrets.SCALINGO_API_TOKEN }}
#
#      - name: Open docker container
#        run: scalingo login --api-token=${{ secrets.SCALINGO_API_TOKEN }}
#      scalingo --app taxi-db run --file ./taxi.gz bash
#      cp /tmp/uploads/taxi.gz taxi.gz
#      gzip -d taxi.gz
#      jq '.records' taxi > records
#      jq 'map(select(has("@class")))' records > class
#      jq 'map(select(."@class" | contains("Driver")))' class > drivers
#
#      - name: Create drivers table
#        run: |
#          echo "CREATE TABLE IF NOT EXISTS drivers (user_id serial PRIMARY KEY, email VARCHAR ( 255 ) UNIQUE NOT NULL, username VARCHAR ( 50 ) UNIQUE NOT NULL); INSERT INTO drivers (email, username) VALUES ('test@test.com', 'Yojimbo'); \q" | scalingo --app ${{ inputs.application-name }} pgsql-console

      #- name: Feed drivers table with json
      #  run: |
      #    echo "\set content `$DATA`; create temp table t ( j jsonb );  insert into t values (:'content');  select * from t; \q" | scalingo --app ${{ inputs.application-name }} pgsql-console

#      - name: Start container with json file in
#        run: scalingo --app ${{ inputs.application-name }} run --file ./drivers.json
#
#      - name: Try to insert the json in the drivers table
#        run: >-
#          scalingo --app ${{ inputs.application-name }} run bash -c "echo 'Installing pgsql-client' &&
#          dbclient-fetcher pgsql &&
#          echo 'Trying to interact with db' &&
#          ls -la /tmp &&
#          psql $DATABASE_VAR -c '\x' -c 'SELECT * FROM drivers;'
#          exit 0" --file ./drivers
  



